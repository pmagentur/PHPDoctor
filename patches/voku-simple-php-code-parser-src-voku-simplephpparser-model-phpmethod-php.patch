--- /dev/null
+++ ../src/voku/SimplePhpParser/Model/PHPMethod.php
@@ -73,19 +73,28 @@
         }
 
         if (!$this->returnType && $node->returnType) {
-            if (\method_exists($node->returnType, 'toString')) {
+            if ($node->returnType instanceof \PhpParser\Node\NullableType) {
+                $typeNames = '';
+                if (\method_exists($node->returnType, 'toString')) {
+                    $typeNames = $node->returnType->type->toString();
+                } else if (\property_exists($node->returnType->type, 'name')) {
+                    $typeNames = $node->returnType->type->name;
+                } else if (\property_exists($node->returnType->type, 'parts')) {
+                    $typeNames = implode('|', $node->returnType->type->parts);
+                }
+
+                if ($typeNames) {
+                    $typeNames .= '|';
+                }
+
+                $this->returnType = $typeNames.'null';
+
+            } else if (\method_exists($node->returnType, 'toString')) {
                 $this->returnType = $node->returnType->toString();
+
             } elseif (\property_exists($node->returnType, 'name')) {
                 /** @psalm-suppress UndefinedPropertyFetch - FP? */
                 $this->returnType = $node->returnType->name;
-            }
-
-            if ($node->returnType instanceof \PhpParser\Node\NullableType) {
-                if ($this->returnType && $this->returnType !== 'null') {
-                    $this->returnType = 'null|' . $this->returnType;
-                } else {
-                    $this->returnType = 'null|mixed';
-                }
             }
         }
 
